package sgea.sistema.sgea.controller;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import sgea.sistema.sgea.model.ColaboradorLogado;
import sgea.sistema.sgea.model.LoginUsuario;
import sgea.sistema.sgea.repository.ColaboradorLogadoRepository;
import sgea.sistema.sgea.repository.LoginRepository;
import sgea.sistema.sgea.response.ApiResponse;

@RestController
@RequestMapping("/login")
@CrossOrigin (origins = "http://localhost:4200", allowedHeaders = "*", allowCredentials  = "true")
public class LoginController {
	
	
 
	
	@Autowired
	private ColaboradorLogadoRepository colaboradorLogadoRepository;
	
 
	@PostMapping("/signin")
	public ResponseEntity<ApiResponse> login(@RequestBody LoginUsuario login) {
	    try {
	        // Validação de entrada
	        if (login.getCpf() == null || login.getSenha() == null) {
	            ApiResponse apiResponse = new ApiResponse("Error", "CPF e Senha são obrigatórios!");
	            return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
	        }

	        String cpfLogin = login.getCpf();
	        String senhaLogin = login.getSenha();

	        // Busca o colaborador pelo CPF
	        Optional<ColaboradorLogado> colaboradorOptional = colaboradorLogadoRepository.findByCpf(cpfLogin);

	        // Verifica se o colaborador existe
	        if (colaboradorOptional.isEmpty()) {
	            ApiResponse apiResponse = new ApiResponse("Error", "Usuário não encontrado!");
	            return new ResponseEntity<>(apiResponse, HttpStatus.NOT_FOUND);
	        }

	        ColaboradorLogado colaborador = colaboradorOptional.get();

	        // Verifica a senha
	        if (!colaborador.getSenha().equals(senhaLogin)) {
	            ApiResponse apiResponse = new ApiResponse("Error", "Senha incorreta!");
	            return new ResponseEntity<>(apiResponse, HttpStatus.UNAUTHORIZED);
	        }

	        // Retorna o nome e email do colaborador
	        Map<String, String> dadosUsuario = Map.of(
	            "nome", colaborador.getNome(),
	            "email", colaborador.getEmail()
	        );

	        ApiResponse apiResponse = new ApiResponse("Success", "Login realizado com sucesso!", dadosUsuario);
	        return new ResponseEntity<>(apiResponse, HttpStatus.OK);

	    } catch (Exception e) {
	        // Log do erro
	        System.err.println("Erro no login: " + e.getMessage());
	        ApiResponse apiResponse = new ApiResponse("Error", "Erro interno de servidor!");
	        return new ResponseEntity<>(apiResponse, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}
}
