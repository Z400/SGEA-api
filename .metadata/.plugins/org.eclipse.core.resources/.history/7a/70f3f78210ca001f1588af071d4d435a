package sgea.sistema.sgea.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import sgea.sistema.sgea.model.Colaborador;
import sgea.sistema.sgea.repository.ColaboradorRepository;

 
@Service
public class ColaboradorService {
	
	@Autowired
	private ColaboradorRepository colaboradorRepository;
	
	public Colaborador cadastrarColaborador (Colaborador colaborador) {
		return colaboradorRepository.save(colaborador);
	}
	
	
	public List<Colaborador> listarColaboradores(){
		return colaboradorRepository.findAll();
	}
	
	 
	public Colaborador atualizarColaborador(String cpf, Colaborador dadosAtualizados) {
		
		Optional<Colaborador> verifyExisting = colaboradorRepository.findByCpf(cpf);
		
		 if(verifyExisting.isPresent()) {
			  
				 Colaborador colaboradorPresente  = verifyExisting.get();
				 
				 colaboradorPresente.setNome(dadosAtualizados.getNome());
				 colaboradorPresente.setCep(dadosAtualizados.getCep());
				 colaboradorPresente.setCidade(dadosAtualizados.getCidade());
				 colaboradorPresente.setComplemento(dadosAtualizados.getComplemento());
				 colaboradorPresente.setCpf(dadosAtualizados.getCpf());
				 colaboradorPresente.setDatanascimento(dadosAtualizados.getDatanascimento());
				 colaboradorPresente.setEmail(dadosAtualizados.getEmail());
				 colaboradorPresente.setEndereco(dadosAtualizados.getEndereco());
				 colaboradorPresente.setEstado(dadosAtualizados.getEstado());
				 colaboradorPresente.setNumero(dadosAtualizados.getNumero());
				 colaboradorPresente.setSenha(dadosAtualizados.getSenha());
				 colaboradorPresente.setSituacao(dadosAtualizados.getSituacao());
				 colaboradorPresente.setTelefone(dadosAtualizados.getTelefone());
				 colaboradorPresente.setUsuario(dadosAtualizados.getUsuario());
				 
				 return colaboradorRepository.save(colaboradorPresente);
							
			} else {
				throw new IllegalArgumentException("Erro durante a atualização deste colaborador!");
		 }
		
		
	}
	
	@Transactional
	public void deletarColaborador(String cpf) {
		
		Optional<Colaborador> verifyExisting = colaboradorRepository.findByCpf(cpf);
		
		if(verifyExisting.isPresent()) {
			
			colaboradorRepository.deleteByCpf(cpf);
			
		} else {
			
			throw new RuntimeException("Colaborador " + cpf + " não encontrado!");
		}
		
	}
	
	public List<Object[]> findCredentials(String nome){
		return colaboradorRepository.findCredentials(nome);
	}
	
	public Colaborador atualizarColaboradorLogado(String cpf, Colaborador novoColaborador) {
        Optional<Colaborador> colaboradorExistente = colaboradorRepository.findByCpf(cpf);

        if (colaboradorExistente.isPresent()) {
            Colaborador atual = colaboradorExistente.get();
            
            // Atualiza apenas os campos fornecidos
            atual.setNome(novoColaborador.getNome() != null ? novoColaborador.getNome() : atual.getNome());
            atual.setEmail(novoColaborador.getEmail() != null ? novoColaborador.getEmail() : atual.getEmail());
            atual.setSenha(novoColaborador.getSenha() != null ? novoColaborador.getSenha() : atual.getSenha());
            atual.setTelefone(novoColaborador.getTelefone() != null ? novoColaborador.getTelefone() : atual.getTelefone());
            atual.setDatanascimento(novoColaborador.getDatanascimento() != null ? novoColaborador.getDatanascimento() : atual.getDatanascimento());

            return colaboradorRepository.save(atual);
        } else {
            throw new RuntimeException("Colaborador não encontrado com o CPF: " + cpf);
        }
    }
	
	
	
}
