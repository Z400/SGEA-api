package sgea.sistema.sgea.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import jakarta.validation.ConstraintViolationException;
import sgea.sistema.sgea.model.Colaborador;
import sgea.sistema.sgea.repository.ColaboradorRepository;
import sgea.sistema.sgea.response.ApiResponse;
import sgea.sistema.sgea.service.ColaboradorService;

@RestController
@RequestMapping("/colaborador")
@CrossOrigin (origins = "http://localhost:4200", allowedHeaders = "*", allowCredentials  = "true")
public class ColaboradorController {
	
	@Autowired
	private ColaboradorService colaboradorService;
	
	private ColaboradorRepository colaboradorRepository;
 
	@PostMapping("/cadastrar")
	public ResponseEntity<ApiResponse> cadastrarColaborador(@RequestBody Colaborador colaborador) {
	    try {
	        Colaborador novoColaborador = colaboradorService.cadastrarColaborador(colaborador);
	        ApiResponse apiResponse = new ApiResponse("Success", "Colaborador cadastrado!", novoColaborador);
	        return new ResponseEntity<>(apiResponse, HttpStatus.CREATED);
	    } catch (ConstraintViolationException e) {
	        List<String> erros = e.getConstraintViolations().stream()
	            .map(violation -> violation.getMessage())
	            .collect(Collectors.toList());
	        ApiResponse apiResponse = new ApiResponse("Error", "Erro de validação!", erros);
	        return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
	    } catch (DataIntegrityViolationException e) {
	        ApiResponse apiResponse = new ApiResponse("Error", "Já existe um CPF com este número cadastrado!");
	        return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
	    } catch (Exception e) { // Deve vir por último
	        ApiResponse apiResponse = new ApiResponse("Erro", e.getMessage());
	        return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
	    }
	}

	@GetMapping("/listar")
	public List<Colaborador> listarColaboradores(){
		return colaboradorService.listarColaboradores();
	}
	
	@PutMapping("/atualizar/{cpf}")
	public ResponseEntity<ApiResponse> atualizarColaborador(@PathVariable String cpf, @RequestBody Colaborador colaborador){
		 
			
			try {
				
				colaboradorService.atualizarColaborador(cpf, colaborador);
				ApiResponse apiResponse = new ApiResponse("Success", "Colaborador atualizado!");
				return new ResponseEntity<>(apiResponse, HttpStatus.CREATED);
				
			} catch (Exception e) {
				
				ApiResponse apiResponse = new ApiResponse("Error", e.getMessage());
				return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
			}
		}  
			
	@DeleteMapping("/deletar/{cpf}")
	public ResponseEntity<ApiResponse> deletarColaborador(@PathVariable String cpf){
		
		try {
			
			colaboradorService.deletarColaborador(cpf);
			ApiResponse apiResponse = new ApiResponse("Success", "Colaborador deletado!", cpf);
			return new ResponseEntity<>(apiResponse, HttpStatus.OK);
			
		} catch (Exception e) {
			
			ApiResponse apiResponse = new ApiResponse("Error", e.getMessage(), cpf);
			return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
		}
	}
		
	@GetMapping("/listarCredenciais")
	public ResponseEntity<Object> findCredetials(@RequestParam String nome) {
	    try {
	        List<Object[]> credentials = colaboradorService.findCredentials(nome);
	        
	        if (credentials.isEmpty()) {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Nenhum colaborador encontrado com o nome: " + nome);
	        }
	        
	        // Formatar a resposta com os dados das credenciais
	        List<Map<String, Object>> response = credentials.stream().map(cred -> {
	            Map<String, Object> map = new HashMap<>();
	            map.put("cpf", cred[0]);
	            map.put("nome", cred[1]);
	            map.put("datanascimento", cred[2]);
	            map.put("telefone", cred[3]);
	            map.put("email", cred[4]);
	            map.put("senha", cred[5]);
	            return map;
	        }).collect(Collectors.toList());
	        
	        return ResponseEntity.ok(response);
	        
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                             .body("Erro ao buscar credenciais: " + e.getMessage());
	    }
	    
	}
		
	@PutMapping("/colaborador/atualizar/{cpf}")
	public ResponseEntity<?> atualizarColaboradorLogado (@PathVariable String cpf, @RequestBody Colaborador colaborador) {
	    try {
	        Optional<Colaborador> colaboradorExistente = colaboradorRepository.findByCpf(cpf);

	        if (colaboradorExistente.isEmpty()) {
	            return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                                 .body(Map.of("status", "Error", "message", "Colaborador não encontrado"));
	        }

	        Colaborador atual = colaboradorExistente.get();
	        atual.setNome(colaborador.getNome());
	        atual.setEmail(colaborador.getEmail());
	        atual.setSenha(colaborador.getSenha());
	        atual.setTelefone(colaborador.getTelefone());
	        atual.setDatanascimento(colaborador.getDatanascimento());

	        colaboradorRepository.save(atual);

	        return ResponseEntity.ok(Map.of("status", "Success", "message", "Colaborador atualizado com sucesso"));
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
	                             .body(Map.of("status", "Error", "message", "Erro ao atualizar colaborador: " + e.getMessage()));
	    }
	}
	
	
}
