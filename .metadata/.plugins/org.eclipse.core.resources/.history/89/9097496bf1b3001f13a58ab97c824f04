package sgea.sistema.sgea.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.ConstraintViolationException;
import sgea.sistema.sgea.model.Colaborador;
 import sgea.sistema.sgea.repository.ColaboradorRepository;
import sgea.sistema.sgea.response.ApiResponse;
import sgea.sistema.sgea.service.ColaboradorService;

@RestController
@RequestMapping("/api-colaborador")
@CrossOrigin (origins = "http://localhost:4200", allowedHeaders = "*", allowCredentials  = "true")

public class ColaboradorController {
	
	@Autowired
	private ColaboradorService colaboradorService;
	
	@Autowired
	private ColaboradorRepository colaboradorRepository;
	
	@PostMapping("/cadastrar")
	public ResponseEntity<ApiResponse> cadastrarColaborador(@RequestBody @Validated Colaborador colaborador){
			
		try {
		 
			
			Colaborador novoColaborador = colaboradorService.cadastrarColaborador(colaborador);
			ApiResponse apiResponse = new ApiResponse("Success", "Colaborador cadastrado!", novoColaborador);
			return new ResponseEntity<>(apiResponse, HttpStatus.CREATED);
			
		}catch (ConstraintViolationException e) {
			
			List<String> erros = e.getConstraintViolations().stream().
				map(violation -> violation.getMessage()).collect(Collectors.toList());   	
	        	ApiResponse apiResponse = new ApiResponse("Error", "Erro de validação!", erros);
	        	return new ResponseEntity<>(apiResponse,HttpStatus.BAD_REQUEST);
			
			} catch (Exception e) {
			
			ApiResponse apiResponse = new ApiResponse("Erro", e.getMessage());
			return new ResponseEntity<>(apiResponse,HttpStatus.BAD_REQUEST);
			
		}
		
	}

	@GetMapping("/listar")
	public List<Colaborador> listarColaboradores(){
		return colaboradorService.listarColaboradores();
	}
	
	@PutMapping("/atualizar/{cnpj}")
	public ResponseEntity<ApiResponse> atualizarColaborador(@PathVariable String cnpj, @RequestBody Colaborador colaborador){
		
		Optional<Colaborador> verifyExisting = colaboradorRepository.findByCpf(cnpj);
		 
		if (verifyExisting.isPresent()) {
			
			try {
				
				colaboradorService.atualizarColaborador(cnpj, colaborador);
				ApiResponse apiResponse = new ApiResponse("Success", "Colaborador atualizado!");
				return new ResponseEntity<>(apiResponse, HttpStatus.CREATED);
				
			} catch (Exception e) {
				
				ApiResponse apiResponse = new ApiResponse("Error", e.getMessage());
				return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
			}
		} else {
			throw new IllegalArgumentException("Erro durante a atualização deste colaborador!");
		  }
			
		}
		
	@DeleteMapping("/deletar/{cpf}")
	public ResponseEntity<ApiResponse> deletarColaborador(@PathVariable String cpf){
		
		try {
			
			colaboradorService.deletarColaborador(cpf);
			ApiResponse apiResponse = new ApiResponse("Success", "Colaborador deletado!", cpf);
			return new ResponseEntity<>(apiResponse, HttpStatus.OK);
			
		} catch (Exception e) {
			
			ApiResponse apiResponse = new ApiResponse("Error", e.getMessage(), cpf);
			return new ResponseEntity<>(apiResponse, HttpStatus.BAD_REQUEST);
		}
	}
		
	
}
